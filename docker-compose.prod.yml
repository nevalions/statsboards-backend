version: '3.8'

networks:
  backend-network:
    external: true
  frontend-network:
    external: true
  custom_bridge:
    driver: bridge # need to connect to postgres on local network

volumes:
  poetry-cache:
  static-files:
    driver: local
    driver_opts:
      type: none
      device: ./static  # Bind to local ./static directory
      o: bind
  certbot-etc:
  certbot-var:

services:
  certbot:
    image: certbot/certbot:latest
    container_name: certbot-renewal
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    entrypoint: |
      sh -c '
      set -x
      if [ ! -d /etc/letsencrypt/live ]; then
        certbot certonly --webroot -w /var/lib/letsencrypt \
          --agree-tos --no-eff-email --email nevalions@gmail.com \
          -d statsboard.ru -d www.statsboard.ru -d statsboard.online -d www.statsboard.online;
      fi;
      while :; do
        certbot renew --webroot -w /var/lib/letsencrypt --quiet --agree-tos --post-hook "nginx -s reload";  
        sleep 12h;
      done'
    networks:
      - frontend-network
      - backend-network

  statsboards-backend:
    labels:
      logging: "promtail"
      logging_jobname: "backend_prod_logs"
    image: statsboards-backend-prod:latest
    container_name: statsboards-backend-prod-container
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: poetry run python run_prod_server.py
    ports:
      - "9000:9000"
    volumes:
      - certbot-etc:/etc/letsencrypt
#      - /etc/letsencrypt:/etc/letsencrypt
      - static-files:/app/static:rw  # Read-write access for backend
      - poetry-cache:/root/.cache/pypoetry
    env_file:
      - .env.prod
    networks:
      - backend-network
      - frontend-network
      - custom_bridge
    healthcheck:
      test: [ "CMD-SHELL", "curl -ks --fail https://localhost/api/health || exit 1" ]
#      test: [ "CMD-SHELL", "curl -ks --fail https://localhost/api/health | grep -q '\"status\": \"ok\"'" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - certbot
    restart: always

  nginx-static:
    labels:
      logging: "promtail"
      logging_jobname: "backend_static_nginx_logs"
    container_name: statsboards-backend-static-nginx
    build:
      context: ./
      dockerfile: Dockerfile.nginx.static
    volumes:
      - certbot-etc:/etc/letsencrypt
#      - /etc/letsencrypt:/etc/letsencrypt
      - static-files:/usr/share/nginx/static:ro  # Read-only access for nginx
    ports:
      - "8080:8080"
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -ks --fail http://localhost:8080/back-static-nginx-health | grep -q '\"status\": \"ok\"'" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - certbot
    restart: always

  nginx:
    labels:
      logging: "promtail"
      logging_jobname: "backend_nginx_logs"
    container_name: statsboards-backend-prod-nginx
    build:
      context: ./
      dockerfile: Dockerfile.nginx
    volumes:
      - certbot-etc:/etc/letsencrypt
#      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - statsboards-backend
      - nginx-static
    networks:
      - backend-network
      - frontend-network
      - custom_bridge
    healthcheck:
      test: [ "CMD-SHELL", "curl -ks --fail https://localhost/back-nginx-health | grep -q '\"status\": \"ok\"'" ]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always

# - /home/www/code/statsboards-backend/static:/app/static
#      - /home/www/code/statsboards-backend/static:/usr/share/nginx/static


#      - /home/www/code/statsboards-angular-legacy/dist/statsboards-angular-legacy/browser:/usr/share/nginx/html

#version: '3'
#
#networks:
#  custom_bridge:
#    driver: bridge # need bridge to connect to db in local network
#
#services:
#  statsboards-backend:
#    container_name: statsboards-backend-prod-container
#    build:
#      context: .
#      dockerfile: Dockerfile.prod
#    command: poetry run python run_prod_server.py
#    ports:
#      - "9000:9000"
#    volumes:
#      - /etc/letsencrypt:/etc/letsencrypt
#      - /home/www/code/statsboards-backend/static:/app/static
#    env_file:
#      - .env.prod
#    networks:
#      - custom_bridge
#    restart: always
#  nginx:
#    build:
#      context: ./
#      dockerfile: Dockerfile.nginx
#    volumes:
#      - /etc/letsencrypt:/etc/letsencrypt
#      - /home/www/code/statsboards-angular-legacy/dist/statsboards-angular-legacy/browser:/usr/share/nginx/html
#      - /home/www/code/statsboards-backend/static:/usr/share/nginx/static
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - statsboards-backend
#    networks:
#      - custom_bridge
#    restart: always