name: Deploy

on:
  workflow_run:
    workflows: ["Build and Test"] 
    types:
      - completed

# Add these permissions
permissions:
  contents: read
  statuses: write
  actions: read

jobs:
  deploy:
    # Only run if Build and Test workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Key and Config
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STATSBOARDS_DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Validate SSH Configuration
      run: |
        echo "Host: ${{ secrets.SSH_HOST }}"
        echo "User: ${{ secrets.SSH_USER }}"
        echo "Work Dir: ${{ secrets.WORK_DIR }}"
        if [[ -z "${{ secrets.SSH_USER }}" || -z "${{ secrets.SSH_HOST }}" || -z "${{ secrets.WORK_DIR }}" ]]; then
          echo "Error: One or more required secrets are missing or empty!" >&2
          exit 1
        fi
        ls -la ~/.ssh

    - name: Pull and Deploy on Server
      id: deploy
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        # Attempt deployment with error handling
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
          cd ${{ secrets.WORK_DIR }} && \
          git pull || (echo 'Git pull failed' && exit 1) && \
          docker-compose -f docker-compose.prod.yml up -d --build || (echo 'Docker deployment failed' && exit 1)"


    - name: Cleanup Docker Resources on Server
      if: success()  # Only run if previous steps succeeded
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
          docker system prune -af --volumes && \
          docker image prune -af && \
          docker volume prune -af"

    - name: Cleanup SSH Keys Locally
      if: always()  # Always run, even if previous steps failed
      run: |
        echo "Cleaning up SSH keys on the runner..."
        rm -rf ~/.ssh

    # Create GitHub Status Checks
    - name: Create GitHub Status
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const commit_sha = context.payload.workflow_run.head_commit.id
          const conclusion = context.payload.workflow_run.conclusion
          const status = conclusion === 'success' ? 'success' : 'failure'
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: commit_sha,
            state: status,
            context: 'Deployment',
            description: `Deployment ${status}`
          })