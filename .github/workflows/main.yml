# name: CI/CD Pipeline
#         echo "LOGS_CONFIG=logging-config_dev.yaml" >> .env
        
#         echo "DB_HOST=localhost" >> .env
#         echo "DB_USER=test" >> .env
#         echo "DB_PASSWORD=test" >> .env
#         echo "DB_NAME=test_db" >> .env
#         echo "DB_PORT=5432" >> .env

#         echo "DB_TEST_HOST=localhost" >> .env
#         echo "DB_TEST_USER=test" >> .env
#         echo "DB_TEST_PASSWORD=test" >> .env
#         echo "DB_TEST_NAME=test_db" >> .env
#         echo "DB_TEST_PORT=5432" >> .env
#         cat .env  # Print the .env file to verify its contents

#     - name: Create .env.test file
#       run: |

#         echo "LOGS_CONFIG=logging-config_dev.yaml" >> .env.test
        
#         echo "DB_HOST=localhost" >> .env.test
#         echo "DB_USER=test" >> .env.test
#         echo "DB_PASSWORD=test" >> .env.test
#         echo "DB_NAME=test_db" >> .env.test
#         echo "DB_PORT=5432" >> .env.test
        
#         echo "DB_TEST_HOST=localhost" >> .env.test
#         echo "DB_TEST_USER=test" >> .env.test
#         echo "DB_TEST_PASSWORD=test" >> .env.test
#         echo "DB_TEST_NAME=test_db" >> .env.test
#         echo "DB_TEST_PORT=5432" >> .env.test
#         cat .env.test  # Print the .env.test file to verify its contents

#     - name: Run tests
#       run: |
#         poetry run pytest

#   # deploy:
#   #   # needs: build-and-test
#   #   runs-on: ubuntu-latest

#   #   steps:
#   #   - name: Checkout code
#   #     uses: actions/checkout@v4
      
#   #   - name: Setup SSH Key and Config
#   #     run: |
#   #       mkdir -p ~/.ssh
#   #       echo "${{ secrets.STATSBOARDS_DEPLOY_KEY }}" > ~/.ssh/id_rsa
#   #       chmod 600 ~/.ssh/id_rsa
#   #       ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

#   #   - name: Validate SSH Configuration
#   #     run: |
#   #       echo "Host: ${{ secrets.SSH_HOST }}"
#   #       echo "User: ${{ secrets.SSH_USER }}"
#   #       echo "Work Dir: ${{ secrets.WORK_DIR }}"
#   #       if [[ -z "${{ secrets.SSH_USER }}" || -z "${{ secrets.SSH_HOST }}" || -z "${{ secrets.WORK_DIR }}" ]]; then
#   #         echo "Error: One or more required secrets are missing or empty!" >&2
#   #         exit 1
#   #       fi
#   #       ls -la ~/.ssh

#   #   - name: Test SSH Connection
#   #     run: |
#   #       ssh -v ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH Connection Successful'"

#   #   - name: Pull Latest Code on Server
#   #     run: |
#   #       ssh -v ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git pull"

#   #   - name: Docker Compose Up
#   #     run: |
#   #       ssh -v ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker-compose -f docker-compose.prod.yml up -d --build"

#   #   - name: Cleanup SSH
#   #     run: |
#   #       rm -rf ~/.ssh
